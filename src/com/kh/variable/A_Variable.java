package com.kh.variable;

public class A_Variable {

	// 시급과 근무시간과 근무일수를 곱해서 월급을 계산해서 출력하는 메소드
	public void printVariable() {
		
		System.out.println("======== 변수 사용 전 ==========");
		
		System.out.println("시급: 9450원");
		System.out.println("근무시간: 6시간");
		System.out.println("근무일수: 8일");
		
		// 월급 = 시급*근무시간*근무일수
		// 김갑생: 00000원 형식으로 출력하고 싶다!
		System.out.println("김갑생: " + (9450*6*8) + "원");
		System.out.println("권다현: " + (9450*6*8) + "원");
		System.out.println("권수연: " + (9450*6*8) + "원");
		System.out.println("권윤지: " + (9450*6*8) + "원");
		System.out.println("권한나: " + (9450*6*8) + "원"); // 자바에서 곱셈은 '*'로 나타낸다
		
		// 변수 사용후
		System.out.println("======== 변수 사용 후 ========");
		
		int pay = 9450; // 자바에서 '=' 이라는 기호는 동등하다르는 뜻이 아니라 대입하겠다는 의미.
		// 즉, 8500이라는 값을 pay라는 상자에 대입하겠다.
		int time = 6;
		int day = 8;
		
		System.out.println("김가연: " + (pay*time*day) + "원");
		System.out.println("김란: " + (pay*time*day) + "원");
		System.out.println("김민지: " + (pay*time*day) + "원");
		System.out.println("김비안: " + (pay*time*day) + "원");
		System.out.println("김예은: " + (pay*time*day) + "원");
		
		/*
		 * 변수를 사용하는 이유
		 * 1. 변수는 우선적으로 값에 의미를 부여할 목적으로 사용한다.
		 * 2. 단 한번 값을 기록하고 필요할 때마다 가져다 쓰는 목적으로 쓴다. (재사용성이 높아진다.)
		 * 3. 유지보수를 보다 쉽게 할 수 있다.
		 */
	} 
	
	//변수의 선언
	public void declareVariable() {
		
		
		/*
		 * 변수의 선언
		 * 값을 기록하기 위한 변수를 메모리 공간에 확보(할당)한다. => 즉, 값을 보관하기 위한 상자를 만들겠다
		 * 
		 * [표현법] 자료형 변수이름;
		 * 
		 * 자료형: 변수의 크기 및 모양을 지정해주는 부분
		 * 변수이름: 변수의 이름을 붙여주는 부분(의미부여)
		 * 
		 * 변수 선언 시 주의할점
		 * 1. 변수이름은 소문자로 시작/ 단, 낙타봉 표기법을 지킬 것!/ 예약어는 사용불가
		 * 2. 같은 영역('{}'로 묶인 영역) 안에서는 동일한 변수명으로 선언 불가 => 즉, 중복이 불가능하다.
		 * 3. 해당 영역('{}'로 묶인 영역) 안에서 선언된 변수는 그 영역 안에서만 사용 가능 => 즉, 다른 메소드에서는 사용이 불가하다
		 */
		
		
		//---------자료형에 대한 개념----------
		// 1. 논리형 (논리값= true or false)
		boolean isTrue;
		boolean isFalse = true; // 1byte, 변수 선언과 동시에 값을 대입(=)
		System.out.println("isFalse에 새로운 갑으로 대입 전: " + isFalse);
		
		isTrue = true;
		isFalse = false;
		
		
		// 2. 숫자형 
		// 2_1. 정수형
		byte bNum; // 1byte (-128 ~ 127)
		bNum = -128;
		//↑ 두 단계에 거쳐 값을 지정하는 방법
		
		short sNum = 1000; // 2byte
		//↑ 한 번에 값을 지정하는 방법
		
		int iNum = 10000; // 4byte, 정수형의 기본 자료형
		
		long lNum = 100000; // 8byte
		
		// 2_2. 실수형
		float fNum = 0.1f; //4byte => 소숫점 7자리까지
						   //double과 구분하기 위해 값 뒤에 'f'를 입력해야함
		
		double dNum = 0.1234567; //8byte => 소숫점 15자리까지, 실수형의 기본 자료형
		
		// 3. 문자형
		// 3_1. 문자
		char ch = 'a'; // 2byte
		char kim;
		kim = '김';
		
		// 3_2. 문자열
		String str = "abc"; // 참조형
		
		System.out.println(isTrue);
		System.out.println("isFalse에 새로운 값을 넣은 후:" + isFalse);
		System.out.println(bNum);
		
		// 변수이름: 값의 형태로 출력하고싶다
		System.out.println("sNum: " + sNum);
		System.out.println("iNum: " + iNum);
		System.out.println("lNum: " + lNum);
		System.out.println("fNum: " + fNum);
		System.out.println("dNum: " + dNum);
		
		System.out.println("ch: " + ch);
		System.out.println("kim: " + kim);
		System.out.println("str: " + str);
		
		// 상수의 선언
		// [표현법] final 자료형 상수이름;
		final int AGE; // 상수 이름은 모두 대문자로 적는다
		AGE = 10; // 초기화
		
		System.out.println("AGE: " + AGE);
		
		/*
		 * AGE = 11; <<= 상수는 값의 변경이 불가하다!!
		
		System.out.println("AGE: " + AGE);
		*/
		// 대표적인 상수의 예: 3.14 (파이, 원주율)
		System.out.println("파이: " + Math.PI);
		
		//번외
		int etc = 999_999_999;
		
		System.out.println("etc: " + etc);
		
		// 변수명명규칙
		int number;
		
		// 1) 같은 영역 내에 중복된 이름 안됨!
		//int number;
		// 대소문자는 구분
		int numBer;
		
		// 2) 예약어 (이미 자바에서 사용되고 있는 키워드) 사용x
		/*
		 * int class;
		 * int static;
		 * int true;
		 */
		
		int number1;
		int num1ber;
		//int 1number;
		int number_1;
		int _number;
		int number$;
		//int number!;
		//int number#;
		
		// 권장사항!! (오류는 발생하지 않으나, 지키면 좋은것. 즉, 개발자간의 규칙)
		// 1) 낙타봉표기법
		String username; // 관례상 틀림
		String userName; // 관례상 맞는 표현
		
		// 2) 영문표기 (한글을 사용하지 않는 외국에서는 오류가 발생함.)
		int 나이; //X
		int userAge; //O
		
		
		/*
		 * ** 정리 **
		 * -값(리터럴): 프로그램 상 필요한 명시적인 값
		 * 			   또는 사용자가 마우스 또는 키보드로 입력한 값
		 * -변수: 값을 저장하기 위한 공간 (메모리에 값을 기록하기 위한 공간)
		 */
		
		
	}
		
	
}
